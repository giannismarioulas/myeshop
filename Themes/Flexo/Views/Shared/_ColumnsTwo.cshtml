@*
    // ***	 ** ****** ****** ****** ******* **     ** ****** ***   ** **** ****
    // ****  ** **  ** **  ** **  **  **  **  **   **  **  ** ****  ** *    *
    // ** ** ** **  ** ****** ******  **  **   ** **   ****** ** ** ** *    ***
    // **  **** **  ** **	  **  **  **  **    ***    **  ** **  **** *    *
    // **   *** ****** **	  **  ** *******     *     **  ** **   *** **** ****
    //
    // **************************************************************************
    // *                                                                		*
	// *                      Flexo by NopAdvance team                          *
    // *			Copyright (c) NopAdvance LLP. All Rights Reserved			*
    // *                                                                       	*
    // **************************************************************************
    // *                                                                       	*
    // * Email:		contact@nopadvance.com										*
    // * Website:	https://nopadvance.com										*
    // *                                                                       	*
    // **************************************************************************
    // *                                                                       	*
    // * Please see the  License file for the full End User License Agreement. 	*
    // * The  complete license agreement is also available on  our  website at 	*
    // * https://nopadvance.com/license-terms									*
    // *                                                                       	*
    // * This  software / plugin  is furnished  under a license  and  may   be  *
    // * used  and modified  only in accordance with the terms of such license  *
    // * and with the inclusion of the above copyright notice.  This  software	*
    // * or any other copies thereof may not be  provided  or  otherwise  made	*
    // * available  to any other person.  No title to  and  ownership  of  the  *
    // * software is hereby transferred.                                        *
    // *                                                                       	*
    // * You may not reverse  engineer, decompile, defeat  license  encryption 	*
    // * mechanisms  or  disassemble this software product or software product 	*
    // * license.  NopAdvance may terminate this  license if you don't  comply 	*
    // * with any of the terms & conditions set forth in our  end user license	*
    // * agreement (EULA).  In such event , licensee agrees to return licensor	*
    // * or destroy  all copies of software  upon termination  of the license.	*
    // *                                                                       	*
    // **************************************************************************
*@
@{
    Layout = "_Root";
}
@{
    //current category ID
    var currentCategoryId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("category", StringComparison.InvariantCultureIgnoreCase))
    {
        currentCategoryId = Convert.ToInt32(Url.ActionContext.RouteData.Values["categoryId"].ToString());
    }


    //current manufacturer ID
    var currentManufacturerId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("manufacturer", StringComparison.InvariantCultureIgnoreCase))
    {
        currentManufacturerId = Convert.ToInt32(Url.ActionContext.RouteData.Values["manufacturerId"].ToString());
    }


    //current product ID
    var currentProductId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("product", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("productdetails", StringComparison.InvariantCultureIgnoreCase))
    {
        currentProductId = Convert.ToInt32(Url.ActionContext.RouteData.Values["productId"].ToString());
    }
}
<div class="container">
@await RenderSectionAsync("Breadcrumb", false)

<div class="side-2">
    @if (IsSectionDefined("left"))
    {
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.LeftSideColumnBefore })
        @await RenderSectionAsync("left")
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.LeftSideColumnAfter })
    }
    else
    {
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.LeftSideColumnBefore })
        @await RenderSectionAsync("CatalogFilters", false);
        @await Component.InvokeAsync(typeof(CategoryNavigationViewComponent), new { currentCategoryId = currentCategoryId, currentProductId = currentProductId })
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.LeftSideColumnAfterCategoryNavigation })
        @await Component.InvokeAsync(typeof(ManufacturerNavigationViewComponent), new { currentManufacturerId = currentManufacturerId })
        @await Component.InvokeAsync(typeof(VendorNavigationViewComponent))
        @await Component.InvokeAsync(typeof(RecentlyViewedProductsBlockViewComponent), new { productThumbPictureSize = 64 })
        @await Component.InvokeAsync(typeof(PopularProductTagsViewComponent))
        @await Component.InvokeAsync(typeof(PollBlockViewComponent), new { systemKeyword = "LeftColumnPoll" })
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.LeftSideColumnAfter })
    }
</div>
<div class="center-2">
    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.MainColumnBefore })
    @RenderBody()
    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.MainColumnAfter })
</div>
</div>
