@*
    // ***	 ** ****** ****** ****** ******* **     ** ****** ***   ** **** ****
    // ****  ** **  ** **  ** **  **  **  **  **   **  **  ** ****  ** *    *
    // ** ** ** **  ** ****** ******  **  **   ** **   ****** ** ** ** *    ***
    // **  **** **  ** **	  **  **  **  **    ***    **  ** **  **** *    *
    // **   *** ****** **	  **  ** *******     *     **  ** **   *** **** ****
    //
    // **************************************************************************
    // *                                                                		*
	// *                      Flexo by NopAdvance team                          *
    // *			Copyright (c) NopAdvance LLP. All Rights Reserved			*
    // *                                                                       	*
    // **************************************************************************
    // *                                                                       	*
    // * Email:		contact@nopadvance.com										*
    // * Website:	https://nopadvance.com										*
    // *                                                                       	*
    // **************************************************************************
    // *                                                                       	*
    // * Please see the  License file for the full End User License Agreement. 	*
    // * The  complete license agreement is also available on  our  website at 	*
    // * https://nopadvance.com/license-terms									*
    // *                                                                       	*
    // * This  software / plugin  is furnished  under a license  and  may   be  *
    // * used  and modified  only in accordance with the terms of such license  *
    // * and with the inclusion of the above copyright notice.  This  software	*
    // * or any other copies thereof may not be  provided  or  otherwise  made	*
    // * available  to any other person.  No title to  and  ownership  of  the  *
    // * software is hereby transferred.                                        *
    // *                                                                       	*
    // * You may not reverse  engineer, decompile, defeat  license  encryption 	*
    // * mechanisms  or  disassemble this software product or software product 	*
    // * license.  NopAdvance may terminate this  license if you don't  comply 	*
    // * with any of the terms & conditions set forth in our  end user license	*
    // * agreement (EULA).  In such event , licensee agrees to return licensor	*
    // * or destroy  all copies of software  upon termination  of the license.	*
    // *                                                                       	*
    // **************************************************************************
*@
@model ProductReviewsModel

@inject Nop.Services.Html.IHtmlFormatter htmlFormatter

<div class="page product-reviews-page">
    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductReviewsPageTop, additionalData = Model })
    @if (Model.Items.Count > 0)
    {
        <div class="product-review-list">
            <a name="productreviews"></a>
            <div class="title">
                <strong>@T("Reviews.ExistingReviews")</strong>
            </div>
            @foreach (var review in Model.Items)
            {
                var ratingPercent = review.Rating * 20;
                <div class="product-review-item">
                    <div class="review-item-head">
                        <div class="review-title">
                            <strong>@review.Title</strong>
                        </div>
                        <div class="product-review-box">
                            <div class="rating">
                                <div style="width: @(ratingPercent)%">
                                    @review.Rating
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="review-content">
                        <div class="review-text">
                            @if (!string.IsNullOrEmpty(review.CustomerAvatarUrl))
                            {
                                <div class="avatar">
                                    @if (review.AllowViewingProfiles)
                                    {
                                        <a href="@Url.RouteUrl("CustomerProfile", new { id = review.CustomerId })" class="avatar-img-link">
                                            <img width="120" height="120" src="@(review.CustomerAvatarUrl)" class="avatar-img" alt="Avatar">
                                        </a>
                                    }
                                    else
                                    {
                                        <img width="120" height="120" src="@(review.CustomerAvatarUrl)" class="avatar-img" alt="Avatar">
                                    }
                                </div>
                            }
                            <div class="text-body">
                                @Html.Raw(htmlFormatter.FormatText(review.ReviewText, false, true, false, false, false, false))
                            </div>
                        </div>
                        @foreach (var reviewType in review.AdditionalProductReviewList.Where(x => x.Rating > 0 && x.VisibleToAllCustomers))
                        {
                            var ratingExtPercent = reviewType.Rating * 20;
                            <div class="review-type-rating-ext">
                                <div class="review-title">
                                    <i>@reviewType.Name</i>
                                </div>
                                <div class="product-review-box">
                                    <div class="rating">
                                        <div style="width: @(ratingExtPercent)%">
                                            @reviewType.Rating
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        <div class="review-info">
                            <span class="user">
                                <label>@T("Reviews.From"):</label>
                                @if (review.AllowViewingProfiles)
                                {
                                    <a href="@Url.RouteUrl("CustomerProfile", new { id = review.CustomerId })">@(review.CustomerName)</a>
                                }
                                else
                                {
                                    <span>@review.CustomerName</span>
                                }
                            </span>
                            <span class="separator">|</span>
                            <span class="date">
                                <label>@T("Reviews.Date"):</label>
                                <span>@review.WrittenOnStr</span>
                            </span>
                        </div>
                        @await Html.PartialAsync("_ProductReviewHelpfulness", review.Helpfulness)
                        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductReviewsPageInsideReview, additionalData = review })
                        @if (!string.IsNullOrEmpty(review.ReplyText))
                        {
                            <div class="reply">
                                <div class="reply-header">
                                    @T("Reviews.Reply")
                                </div>
                                <div class="reply-text">
                                    @Html.Raw(htmlFormatter.FormatText(review.ReplyText, false, true, false, false, false, false))
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    }

    @if (!Model.AddProductReview.CanCurrentCustomerLeaveReview)
    {
        <div class="result review-already-added">
            @T("Reviews.OnlyRegisteredUsersCanWriteReviews")
        </div>
    }
    else if (!Model.AddProductReview.CanAddNewReview)
    {
        <div class="result review-already-added">
            @T("Reviews.AlreadyAddedProductReviews")
        </div>
    }         
    else
    {
        <div class="write-review" id="review-form">
            <a name="addreview"></a>
            <div class="title">
                <strong>@T("Reviews.Write")</strong>
            </div>
            <form asp-action="ProductReviews" asp-fragment="addreview" method="post">
                <input type="hidden" asp-for="ProductId" />
                <div asp-validation-summary="ModelOnly" class="message-error"></div>
                <div class="fieldset">
                    <div class="form-fields">
                        <div class="inputs">
                            <label asp-for="AddProductReview.Title" asp-postfix=":"></label>
                            <input asp-for="AddProductReview.Title" class="review-title" />
                            <nop-required />
                            <span asp-validation-for="AddProductReview.Title"></span>
                        </div>
                        <div class="inputs">
                            <label asp-for="AddProductReview.ReviewText" asp-postfix=":"></label>
                            <textarea asp-for="AddProductReview.ReviewText" class="review-text"></textarea>
                            <nop-required />
                            <span asp-validation-for="AddProductReview.ReviewText"></span>
                        </div>
                        <div class="review-rating">
                            <div class="name-description">
                                <label asp-for="AddProductReview.Rating" asp-postfix=":"></label>
                            </div>
                            <div class="rating-wrapper">
                                <div class="label first">@T("Reviews.Fields.Rating.Bad")</div>
                                <div class="rating-options">
                                    <input asp-for="AddProductReview.Rating" value="0" type="radio" id="addproductrating_0" style="display: none;"/>
                                    <div class="custom-radio">
                                        <input class="custom-control-input" asp-for="AddProductReview.Rating" value="1" type="radio" id="addproductrating_1" aria-label="@T("Reviews.Fields.Rating.Bad")" />
                                        <label class="forcheckbox custom-control-label" for="addproductrating_1">&nbsp;</label>
                                    </div>
                                    <div class="custom-radio">
                                        <input class="custom-control-input" asp-for="AddProductReview.Rating" value="2" type="radio" id="addproductrating_2" aria-label="@T("Reviews.Fields.Rating.NotGood")" />
                                        <label class="forcheckbox custom-control-label" for="addproductrating_2">&nbsp;</label>
                                    </div>
                                    <div class="custom-radio">
                                        <input class="custom-control-input" asp-for="AddProductReview.Rating" value="3" type="radio" id="addproductrating_3" aria-label="@T("Reviews.Fields.Rating.NotBadNotExcellent")" />
                                        <label class="forcheckbox custom-control-label" for="addproductrating_3">&nbsp;</label>
                                    </div>
                                    <div class="custom-radio">
                                        <input class="custom-control-input" asp-for="AddProductReview.Rating" value="4" type="radio" id="addproductrating_4" aria-label="@T("Reviews.Fields.Rating.Good")" />
                                        <label class="forcheckbox custom-control-label" for="addproductrating_4">&nbsp;</label>
                                    </div>
                                    <div class="custom-radio">
                                        <input class="custom-control-input" asp-for="AddProductReview.Rating" value="5" type="radio" id="addproductrating_5" aria-label="@T("Reviews.Fields.Rating.Excellent")" />
                                        <label class="forcheckbox custom-control-label" for="addproductrating_5">&nbsp;</label>
                                    </div>
                                   
                                    
                                    
                                </div>                                    
                                <div class="label last">@T("Reviews.Fields.Rating.Excellent")</div>
                            </div>
                        </div>
                        @if (Model.ReviewTypeList.Count > 0)
                        {
                            foreach (var additionalReview in Model.AddAdditionalProductReviewList.OrderBy(ob => ob.DisplayOrder).ToList())
                            {
                                var curAdditionalReview = Model.AddAdditionalProductReviewList.IndexOf(additionalReview);
                                <div class="review-rating custom_review_rating">
                                    <div class="name-description">
                                        <div class="tooltip">
                                            <label>@Html.Raw(additionalReview.Name):</label>
                                            <span class="tooltiptext">@Html.Raw(additionalReview.Description)</span>
                                        </div>
                                    </div>
                                    <div class="rating-wrapper">
                                        <div class="label first">@T("Reviews.Fields.Rating.Bad")</div>
                                        <div class="rating-options">
                                            <input asp-for="@Model.AddAdditionalProductReviewList[curAdditionalReview].ReviewTypeId" value="@(additionalReview.ReviewTypeId)" type="hidden" />
                                            <input asp-for="@Model.AddAdditionalProductReviewList[curAdditionalReview].Name" value="@(additionalReview.Name)" type="hidden" />
                                            <input asp-for="@Model.AddAdditionalProductReviewList[curAdditionalReview].Description" value="@(additionalReview.Description)" type="hidden" />
                                            <input asp-for="@Model.AddAdditionalProductReviewList[curAdditionalReview].DisplayOrder" value="@(additionalReview.DisplayOrder)" type="hidden" />
                                            <input asp-for="@Model.AddAdditionalProductReviewList[curAdditionalReview].IsRequired" value="@(additionalReview.IsRequired)" type="hidden" />

                                            <input asp-for="@Model.AddAdditionalProductReviewList[curAdditionalReview].Rating" value="0" type="radio" id="addproductratingext_0_@(additionalReview.ReviewTypeId)" style="display: none;" />
                                            <div class="custom-radio">
                                                <input class="custom-control-input" asp-for="@Model.AddAdditionalProductReviewList[curAdditionalReview].Rating" value="1" type="radio" id="addproductratingext_1_@(additionalReview.ReviewTypeId)" />
                                                <label class="forcheckbox custom-control-label" for="addproductratingext_1_@(additionalReview.ReviewTypeId)">&nbsp;</label>
                                            </div>

                                            <div class="custom-radio">
                                                <input class="custom-control-input" asp-for="@Model.AddAdditionalProductReviewList[curAdditionalReview].Rating" value="2" type="radio" id="addproductratingext_2_@(additionalReview.ReviewTypeId)" />
                                                <label class="forcheckbox custom-control-label" for="addproductratingext_2_@(additionalReview.ReviewTypeId)">&nbsp;</label>
                                            </div>
                                            <div class="custom-radio">
                                                <input class="custom-control-input" asp-for="@Model.AddAdditionalProductReviewList[curAdditionalReview].Rating" value="3" type="radio" id="addproductratingext_3_@(additionalReview.ReviewTypeId)" />
                                                <label class="forcheckbox custom-control-label" for="addproductratingext_3_@(additionalReview.ReviewTypeId)">&nbsp;</label>
                                            </div>
                                            <div class="custom-radio">
                                                <input class="custom-control-input" asp-for="@Model.AddAdditionalProductReviewList[curAdditionalReview].Rating" value="4" type="radio" id="addproductratingext_4_@(additionalReview.ReviewTypeId)" />
                                                <label class="forcheckbox custom-control-label" for="addproductratingext_4_@(additionalReview.ReviewTypeId)">&nbsp;</label>
                                            </div>
                                            <div class="custom-radio">
                                                <input class="custom-control-input" asp-for="@Model.AddAdditionalProductReviewList[curAdditionalReview].Rating" value="5" type="radio" id="addproductratingext_5_@(additionalReview.ReviewTypeId)" />
                                                <label class="forcheckbox custom-control-label" for="addproductratingext_5_@(additionalReview.ReviewTypeId)">&nbsp;</label>
                                            </div>
                                        </div>
                                        <div class="label last">@T("Reviews.Fields.Rating.Excellent")</div>
                                    </div>
                                </div>
                            }
                        }

                        @if (Model.AddProductReview.DisplayCaptcha)
                        {
                            <nop-captcha action-name="ProductReviews" />
                        }
                    </div>
                </div>
                <div class="buttons">
                    <button type="submit" name="add-review" id="add-review" class="button-1 write-product-review-button">@T("Reviews.SubmitButton")</button>
                </div>
            </form>
        </div>
    }
    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductReviewsPageBottom, additionalData = Model })
</div>
